import argparse
import game_utils
from snake_game import SnakeGame
from game_display import GameDisplay


def main_loop(gd: GameDisplay, args: argparse.Namespace) -> None:
    # INIT OBJECTS
    debug = args.debug
    # debug = True
    game = SnakeGame(args.height, args.width, args.apples, debug, args.walls, args.rounds)
    # game = SnakeGame(40, 30, 0, 0, 0)
    gd.show_score(0)
    game.wall_maker()
    game.apple_maker()
    # DRAW BOARD
    game.draw_board(gd)
    # END OF ROUND 0
    gd.end_round()
    check_game_over = False
    key_clicked = 'Up'
    while not game.is_over(check_game_over):
        # checks if the head of snake should be removed because it hit a wall
        if game.remove:
            game.remove_head()
            check_game_over = True
            continue
        # checks if snake hit itself and ends game if only head is left
        if game.crashed is not None:
            check_game_over = game.end_if_crashed()
            continue
        check_game_over = game.wall_mover()
        game.wall_maker()
        if not debug:
            # if game should end, update objects and end the game
            if check_game_over:
                game.update_objects()
                game.draw_board(gd)
                continue
        # check which next click is an illegal one
        check_click, change_click = clicked(key_clicked)
        # CHECK KEY CLICKS
        key_clicked = gd.get_key_clicked()
        # check if current click is an illegal one
        if key_clicked == check_click or key_clicked is None:
            key_clicked = change_click
        # makes sure snake does not go out of bounds
        if not debug:
            if game.out_of_bounds(key_clicked):
                check_game_over = True
        # UPDATE OBJECTS
        game.read_key(key_clicked)
        game.update_objects()
        gd.show_score(game.get_score())
        # DRAW BOARD
        game.draw_board(gd)
        # WAIT FOR NEXT ROUND:
        gd.end_round()
        game.end_round()


def clicked(last_click):
    # return the value of illegal click for next time user clicks
    if last_click == 'Up':
        return 'Down', 'Up'
    if last_click == 'Down':
        return 'Up', 'Down'
    if last_click == 'Left':
        return 'Right', 'Left'
    if last_click == 'Right':
        return 'Left', 'Right'
    return None, None


if __name__ == "__main__":
    print("You should run:\n"
          "> python game_display.py")
