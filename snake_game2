from typing import Optional
from game_display import GameDisplay
from game_utils import *
import math


class SnakeGame:

    def __init__(self, height, width, n_apples, debug, n_walls, rounds) -> None:
        self.debug = debug
        self.snake = []
        self.width = width
        self.height = height
        if not self.debug:
            self.__x = width // 2
            self.__y = height // 2
            self.snake = [(self.__x, self.__y - 2), (self.__x, self.__y - 1), (self.__x, self.__y)]
        self.max_rounds = rounds + 1
        self.rounds = 1
        self.apples = []
        self.n_apples = n_apples
        self.is_growing = False
        self.walls = []
        self.n_walls = n_walls
        self.grow = 0
        self.score = 0
        self.__key_clicked = 'Up'
        self.crashed = None
        self.remove = False

    def read_key(self, key_clicked: Optional[str]) -> None:
        # keeps the information of the key pressed in main as the default
        # until the next key is pressed
        if key_clicked:
            self.__key_clicked = key_clicked

    def update_objects(self) -> None:
    # This function updates the game state by creating new apples, 
    # moving snake, checking if snake bumped into apple and updating length of snake
        if not self.debug:
            self.apple_maker()
            self.check_apple()
            self.move_snake()
            self.snake.append((self.__x, self.__y))
            # if snake has eaten apple - let it grow
            if self.grow != 0:
                self.grow -= 1
                self.is_growing = True
            # if snake has not eaten apple - keep same length
            else:
                self.snake.remove(self.snake[0])
                self.is_growing = False
            # renew apple if snake has eaten it
            if self.snake[-1] in self.apples:
                self.apple_maker()
                self.check_apple()
        else:
            self.apple_maker()

    def move_snake(self):
    # This function updates the snake's position based on key clicked by user
        if (self.__key_clicked == 'Left') and (self.__x > 0):
            self.__x -= 1
        elif (self.__key_clicked == 'Right') and (self.__x < self.width):
            self.__x += 1
        if (self.__key_clicked == 'Up') and (self.__y < self.height):
            self.__y += 1
        elif (self.__key_clicked == 'Down') and (self.__y > 0):
            self.__y -= 1
        # if snake crashed into a wall, remove head and end game
        for walls in self.walls:
            for wall in walls:
                if wall[0] == self.snake[-1][0] and wall[1] == self.snake[-1][1]:
                    self.remove = True
    def remove_head(self):
    # This function removes head of snake
        self.snake.remove(self.snake[-1])

    def wall_maker(self):
    # This function creates a new wall in the game
        # check number of walls on screen
        if len(self.walls) < self.n_walls:
            wall_list = []
            # get random coordinates for the wall
            # coordinates is the middle cell of the wall
            coordinates = get_random_wall_data()
            # check method for comment
            is_valid = self.check_clash(coordinates)
            # add wall to the game
            if is_valid:
                if coordinates[2] == 'Right' or coordinates[2] == 'Left':
                    wall_list.append((coordinates[0] + 1, coordinates[1], coordinates[2]))
                    wall_list.append(coordinates)
                    wall_list.append((coordinates[0] - 1, coordinates[1], coordinates[2]))
                if coordinates[2] == 'Up' or coordinates[2] == 'Down':
                    wall_list.append((coordinates[0], coordinates[1] + 1, coordinates[2]))
                    wall_list.append(coordinates)
                    wall_list.append((coordinates[0], coordinates[1] - 1, coordinates[2]))
                self.walls.append(wall_list)

    def check_clash(self, coordinates):
        # check if all 3 coordinates going to be made are valid
        # and don't clash with existing apple, snake or wall
        coordinates1 = tuple
        coordinates2 = tuple
        if coordinates in self.apples or coordinates in self.snake:
            return False
        # check that wall isn't made on something else
        if coordinates[2] == 'Right' or coordinates[2] == 'Left':
            coordinates1 = (coordinates[0] + 1, coordinates[1], coordinates[2])
            coordinates2 = (coordinates[0] - 1, coordinates[1], coordinates[2])
        if coordinates[2] == 'Up' or coordinates[2] == 'Down':
            coordinates1 = (coordinates[0], coordinates[1] + 1, coordinates[2])
            coordinates2 = (coordinates[0], coordinates[1] - 1, coordinates[2])
        if coordinates1 in self.apples or coordinates1 in self.snake:
            return False
        if coordinates2 in self.apples or coordinates2 in self.snake:
            return False
        for walls in self.walls:
            for wall in walls:
                if wall[0] == coordinates[0] and wall[1] == coordinates[1]:
                    return False
                if wall[0] == coordinates1[0] and wall[1] == coordinates1[1]:
                    return False
                if wall[0] == coordinates2[0] and wall[1] == coordinates2[1]:
                    return False
        return True

    def wall_mover(self):
        # checks walls on odd rounds
        if self.rounds % 2 == 1:
            for wall_list in self.walls:
                for wall in wall_list:
                    if not self.check_wall(wall):
                        return True
        # both moves and checks walls on even rounds
        if self.rounds % 2 == 0:
            new_wall = list()
            new_list = list()
            for wall_list in self.walls:
                for wall in wall_list:
                    if wall[2] == 'Right':
                        wall = (wall[0] + 1, wall[1], wall[2])
                    if wall[2] == 'Left':
                        wall = (wall[0] - 1, wall[1], wall[2])
                    if wall[2] == 'Up':
                        wall = (wall[0], wall[1] + 1, wall[2])
                    if wall[2] == 'Down':
                        wall = (wall[0], wall[1] - 1, wall[2])
                    # checks that wall is not out of bounds
                    if wall[0] >= self.width or wall[0] < 0 or wall[1] >= self.height or wall[1] < 0:
                        continue
                    if not self.check_wall(wall):
                        return True
                    new_wall.append(wall)
                new_list.append(new_wall)
                new_wall = list()
            self.walls = new_list
            # removes "empty wall" in list of walls so it can be renewed
            for wall in self.walls:
                if len(wall) == 0:
                    self.walls.remove(wall)
        return False

    def check_wall(self, wall):
        # shorten wall before out of bounds, checks if wall hits apple or snake
        check = (wall[0], wall[1])
        if not self.debug:
            if check in self.snake[0:len(self.snake)-1]:
                for place in range(len(self.snake)-1):
                    if self.snake[place] == check:
                        self.crashed = place
                    if check[0] == self.snake[-1][0] and check[1] == self.snake[-1][1]:
                        return False
        if check in self.apples:
            self.apples.remove(check)
        return True

    def end_if_crashed(self):
        if self.crashed is not None:
            self.snake = self.snake[self.crashed:]
            # if only head is left, ends game
            if len(self.snake) < 2:
                return True
        self.crashed = None
        return False

    def apple_maker(self):
        # if less than max number of apples are on screen, renew them
        if len(self.apples) < self.n_apples:
            # get random coordinates for the apple
            coordinates = get_random_apple_data()
            # check if coordinates clash with existing apple, snake or wall
            if coordinates in self.apples or coordinates in self.snake or coordinates in self.walls:
                self.apple_maker()
            # add apple to the game
            self.apples.append(coordinates)

    def check_apple(self):
        # check if snake ate the apple
        for apple in self.apples:
            if self.snake[-1] == apple:
                self.apples.remove(apple)
                self.grow += 3
                self.apple_maker()
                # update the score for eating an apple
                self.score += round(math.sqrt(len(self.snake)-1))
                return True
        return False

    def get_score(self):
        return self.score

    def draw_board(self, gd: GameDisplay) -> None:
        # Draw updated position of all items on board
        for apple in self.apples:
            gd.draw_cell(apple[0], apple[1], "green")
        for x, y in self.snake:
            gd.draw_cell(x, y, "black")
        for wall_list in self.walls:
            for wall in wall_list:
                if 0 <= wall[0] < self.width and 0 <= wall[1] < self.height:
                    gd.draw_cell(wall[0], wall[1], "blue")

    def end_round(self) -> None:
        self.rounds += 1

    def out_of_bounds(self, key_clicked):
        # check if snake head goes out of bounds
        return_val = False
        if self.__x == 0 and (key_clicked == 'Left'):
            self.__x += 1
            return_val = True
        if self.__x == self.width - 1 and (key_clicked == 'Right'):
            self.__x -= 1
            return_val = True
        if self.__y == 0 and (key_clicked == 'Down'):
            self.__y += 1
            return_val = True
        if self.__y == self.height - 1 and (key_clicked == 'Up'):
            self.__y -= 1
            return_val = True
        if return_val:
            self.snake.remove(self.snake[-1])
        return return_val

    def is_over(self, bad_wall_or_bounds) -> bool:
        # if snake head bumps into itself or is out of bounds, game ends
        if bad_wall_or_bounds is True or self.rounds == self.max_rounds:
            return True
        if not self.debug:
            for block in self.snake:
                if block == self.snake[len(self.snake) - 2]:
                    return False
                if block == (self.__x, self.__y):
                    return True
        return False
